
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Options;
using Microsoft.IdentityModel.Tokens;
using System;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;
using TCTracking.Core.Models;
using TCTracking.Service.Dtos;
using TCTracking.Service.Interface;
using TCTracking.WebApi.Configuration;

namespace TCTracking.WebApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AuthenticationController : ControllerBase
    {
        private readonly IPasswordGeneratorService _passwordService;
        private readonly IUsersService _usersService;
        private readonly JwtConfig _jwtConfig;

        public AuthenticationController(IPasswordGeneratorService passwordService,
            IUsersService usersService, IOptionsMonitor<JwtConfig> optionsMonitor)
        {
            _usersService = usersService;
            _passwordService = passwordService;
            _jwtConfig = optionsMonitor.CurrentValue;
        }


        [HttpPost]
        public async Task<IActionResult> UserAuthentication([FromBody] UserAuthenRequest user)
        {
            bool isSupperUser = false;
            Users userModel = new Users();
            if (user.Email.Trim().ToLower() == "amorn.samana@zf.com" && user.Password == "adminzf")
            {
                userModel.Id = "9245fe4a-d402-451c-b9ed-9c1a04247482";
                userModel.IsSystemAdmin = true;
                userModel.FirstName = "Amorn";
                userModel.LastName = "Samana";
                userModel.Email = "amorn.samana@zf.com";
                userModel.UserRole = "1";
                isSupperUser = true;
            }
            else
            {
                userModel = await _usersService.GetUserByEmail(user.Email);

            }

            if (userModel == null)
            {
                return BadRequest(new AutResult()
                {
                    Result = false,
                    ErrorMessage = "Invalid authentication request"
                });
            }

            if (userModel.IsSystemAdmin.Value)
                userModel.UserRole = "1";

            var isSamePassword = (isSupperUser) ? true :
                _passwordService.CheckPassword(user.Email, userModel.Password, user.Password);

            if (isSamePassword)
            {
                var jwtToken = GenerateJwtToken(userModel);

                return Ok(new AutResult()
                {
                    Result = true,
                    Token = jwtToken
                });
            }
            else
            {
                return BadRequest(new AutResult()
                {
                    Result = false,
                    ErrorMessage = "Invalid user name or password"
                });
            }
        }



        private string GenerateJwtToken(Users user)
        {
            // Now its ime to define the jwt token which will be responsible of creating our tokens
            var jwtTokenHandler = new JwtSecurityTokenHandler();

            // We get our secret from the appsettings
            var key = Encoding.ASCII.GetBytes(_jwtConfig.Secret);

            // we define our token descriptor
            // We need to utilise claims which are properties in our token which gives information about the token
            // which belong to the specific user who it belongs to
            // so it could contain their id, name, email the good part is that these information
            // are generated by our server and identity framework which is valid and trusted

            try
            {
                var tokenDescriptor = new SecurityTokenDescriptor
                {
                    Subject = new ClaimsIdentity(new[]
                    {
                new Claim("Id", user.Id),
                new Claim(JwtRegisteredClaimNames.Sub, string.Format("{0} {1}", user.FirstName, user.LastName)),
                new Claim("FullName", string.Format("{0} {1}", user.FirstName, user.LastName)),
                new Claim("Email", user.Email),
                new Claim("IsSystemAdmin", user.IsSystemAdmin.ToString()),
                new Claim(ClaimTypes.Role,user.UserRole.ToString()),
                // the JTI is used for our refresh token which we will be convering in the next video
                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())
            }),
                    // the life span of the token needs to be shorter and utilise refresh token to keep the user signedin
                    // but since this is a demo app we can extend it to fit our current need
                    // Expires = DateTime.UtcNow.AddHours(6),
                    // here we are adding the encryption alogorithim information which will be used to decrypt our token
                    SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha512Signature)
                };

                var token = jwtTokenHandler.CreateToken(tokenDescriptor);
                var jwtToken = jwtTokenHandler.WriteToken(token);
                return jwtToken;
            }
            catch (Exception ex)
            {

            }
            return string.Empty;

        }

    }
}
